#include <stdlib.h>
#include <dos.h>
#include <iostream.h>
#include "types.h"
#include "vector.h"
#include "square_t.h"
#include "polytype.def"

#define diffuse 0
#define specular 254

vector *stube_point(vector *p_stube, u16bit length, s16bit x, s16bit y, s16bit z_size)
{
	u16bit i;
	vector *p;
	vector p1;
	s16bit z;
	s16bit *poly;
	u8bit xan, yan, zan;
	s16bit j;

	p_stube = (vector*)calloc(4*length, sizeof(vector));
	if (p_stube == NULL)
	{
		cout << "out of mem\n";
		exit(1);
	}

	#define rings 10

	xan = 0;
	yan = 0;
	zan = 0;
	p = &p_stube[0];
	for (i = 0; i < length; i++)
	{
		z = (i+1) * z_size;
		p1.x = x;
		p1.y = y;
		p1.z = z;
		//zan++;
		for (j = 0; j < rings; j++)
		{
			yan += 255/rings;
			set_matrix(&xan, &yan, &zan);
			rotate(&p1, p);
			p++;
		}
	}
	return &p_stube[0];
}

s16bit *stube_poly(s16bit *s_stube, u16bit length)
{
	u16bit i;
	s16bit k,j,k1,k2;
	s16bit *poly;

	s_stube = (s16bit*)calloc(11*rings*length, sizeof(s16bit));
	if (s_stube == NULL)
	{
		cout << "out of mem\n";
		exit(1);
	}
	poly = &s_stube[0];
	for (i = 0; i < (length - 1); i++)
	{

		k1 = length * rings;
		k2 = (length + 1) * rings;
		for (j = 0; j < (rings-1); j++)
		{
			*poly = shaded;
			poly++;
			*poly = reverse;
			poly++;
			*poly = diffuse;
			poly++;
			*poly = specular;
			poly++;
			*poly = 0;
			poly++;
			*poly = 0;
			poly++;
			*poly = k1 + j;
			poly++;
			*poly = k1 + j + 1;
			poly++;
			*poly = k2 + j + 1;
			poly++;
			*poly = k2 + j;
			poly++;
			*poly = k1 + j;
			poly++;
		}
		*poly = shaded;
		poly++;
		*poly = reverse;
		poly++;
		*poly = diffuse;
		poly++;
		*poly = specular;
		poly++;
		*poly = 0;
		poly++;
		*poly = 0;
		poly++;
		*poly = k1;
		poly++;
		*poly = k1 + 1;
		poly++;
		*poly = k2 + 1;
		poly++;
		*poly = k2;
		poly++;
		*poly = k1;
		poly++;
	}
	return &s_stube[0];
}