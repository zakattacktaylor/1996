#include <stdlib.h>
#include <stdio.h>
#include <conio.h>
#include <time.h>
extern "C" {
	#include "modex.h"
}
#include "types.h"
#include "anim_sys.h"
#include "vector.h"
#include "light.h"
#include "polygons.h"
#include <math.h>

#define size 127;

#define grid 2
#define x_size 20
#define y_size 20
#define vertices 400

extern float tcos[256];

s16vector *pt, *pt2;
s16vector points[vertices];
s16vector r_points[vertices];

u8bit xan = 0;
u8bit yan = 0;
u8bit zan = 0;

float l_xan = 0;
float l_yan = 0;
float l_zan = 0;

u8bit color;
s16vector *light = new s16vector;

s16bit z_offset = 450;

FILE *disc;

void main()
{
	boolean shut_down = no;
	u8bit key;
	s16bit i,j,n;
	s16bit *depth;
	s16bit *index;

	init_sincos();

	disc = fopen("phongdat.dsc", "r");
	if (disc == NULL)
	{
		printf("error: disc_init -> can't find \"phongdat.dsc\"\n");
		exit(0);
	}
	printf("disc initialized\n");

	n = 0;

	for (i = 0; i < x_size; i++)
		for (j = 0; j < y_size; j++)
		{
			points[n].x = (x_size * grid) - (i * grid << 1);
			points[n].y = (y_size * grid) - (j * grid << 1);
			points[n].z = 127 * tcos[5*i] * tcos[5*j];
			n++;
		}

	init_polygons();

	init_anim();

	while (shut_down == no)
	{
		if (kbhit())
		{
			key = getch();
			switch (key)
			{
				case 27:
					shut_down = yes;
					break;
				case 'a':
					z_offset += 10;
					break;
				case 'z':
					z_offset -=10;
					break;
				default:
					break;
			}
		}

		/* this is infinity with the camera */

		//l_xan++;
		l_yan += M_PI / 127;
		if (l_yan > M_PI) l_yan = - M_PI;
		//l_zan++;

		set_matrix(&xan, &yan, &zan);

		pt = &points[0];
		pt2 = &r_points[0];

		for (i = 0; i < (vertices-1); i++)
		{
			rotate();
			color = pt2->z; //intensity();
			if (color == 0) goto not_visible;
			pt2->z += z_offset;
			//if (!visible()) goto not_visible;
			depth_emulate();
			view_adjust();
			if (!on_screen()) goto not_visible;

			draw_point();
not_visible:
			pt++;
			pt2++;
		}

		//pt = &r_points[0];
		//draw_polygons();

		flip_page();
		xan++;
		yan++;
		zan++;
	}

	kill_anim();
}